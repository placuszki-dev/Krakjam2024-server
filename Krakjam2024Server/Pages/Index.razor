@page "/"
@using Placuszki.Krakjam2024.Server
@inject GameplayService GameplayService
@inject SessionService SessionService
@inject IJSRuntime JSRuntime
@implements IDisposable

<div id="game">
</div>
<div class="splash-overlay">
  <button id="start-game">Loading...</button>
</div>

@code {
    private float _x = 0f;
    private float _y = 5;

    DotNetObjectReference<Index> ObjectReference;

    // TODO: Szymon wywolaj to w JS po tym jak wybierzesz ser i ustawisz go w SessionService
    private void SendUserInfoToClients()
    {
        var userInfo = new UserInfo
        {
            PlayerId = SessionService.getPlayerId(),
            PhoneColor = SessionService.getPhoneColor(),
            CheeseType = SessionService.getCheeseType(),
        };
        GameplayService.SendUserInfoToClients(userInfo);
    }
    
    private void SendDataPacketToClients()
    {
        var dataPacket = new DataPacket
        {
            X = _x,
            Y = _y,
        };
        GameplayService.SendUpdateToClients(dataPacket);
    }

    // To wywolaj Szymon
    private void SendDataPacketToClients(DataPacket dataPacket)
    {
        GameplayService.SendUpdateToClients(dataPacket);
    }

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        if (firstRender)
        {
            // See warning about memory above in the article
            ObjectReference = DotNetObjectReference.Create(this);
            JSRuntime.InvokeVoidAsync("window.initGame", ObjectReference);
        }
    }

    [JSInvokable]
    public string getPhoneColor()
    {
        return SessionService.getPhoneColor();
    }

    [JSInvokable]
    public void setPhoneColor(string color)
    {
	SessionService.setPhoneColor(color);
    }

    [JSInvokable]
    public string getPlayerId()
    {
        return SessionService.getPlayerId();
    }

    [JSInvokable]
    public void setPlayerId(string playerid)
    {
	SessionService.setPlayerId(playerid);
    }

    [JSInvokable]
    public void sendXY(float x, float y)
    {
        float sendX = x;
        float sendY = -y;

        var dataPacket = new DataPacket
        {
            X = sendX,
            Y = sendY,
        };
        Console.WriteLine($"x={sendX}, y={sendY}");
        GameplayService.SendUpdateToClients(dataPacket);
    }

    public void Dispose()
    {
      GC.SuppressFinalize(this);

      if (ObjectReference != null)
      {
        //Now dispose our object reference so our component can be garbage collected
        ObjectReference.Dispose();
      }
    }
}
