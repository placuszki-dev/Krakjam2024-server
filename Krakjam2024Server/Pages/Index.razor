@page "/"
@using Placuszki.Krakjam2024.Server
@inject GameplayService GameplayService
@inject SessionService SessionService
@inject IJSRuntime JSRuntime
@implements IDisposable

<div id="game">
</div>
<div class="splash-overlay">
  <button class="start-game gouda">Gouda</button>
  <button class="start-game cheddar">Cheddar</button>
</div>

@code {
    private float _x = 0f;
    private float _y = 5;

    DotNetObjectReference<Index> ObjectReference;

    [JSInvokable]
    public void SendUserInfoToClients(int cheeseType)
    {
        SessionService.setCheeseType(cheeseType);
        var userInfo = new UserInfo
        {
            PlayerId = SessionService.getPlayerId(),
            PhoneColor = SessionService.getPhoneColor(),
            CheeseType = cheeseType,
        };
        GameplayService.SendUserInfoToClients(userInfo);
    }

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        if (firstRender)
        {
            ObjectReference = DotNetObjectReference.Create(this);
            JSRuntime.InvokeVoidAsync("window.initGame", ObjectReference);
            GameplayService.EndGameReceived += OnEndGameReceived;
        }
    }

    private void OnEndGameReceived(UserInfo obj)
    {
        // TODO: Szymon tu wywołaj od nowa gre
    }

    [JSInvokable]
    public string getPhoneColor()
    {
        return SessionService.getPhoneColor();
    }

    [JSInvokable]
    public void setPhoneColor(string color)
    {
	SessionService.setPhoneColor(color);
    }

    [JSInvokable]
    public string getPlayerId()
    {
        return SessionService.getPlayerId();
    }

    [JSInvokable]
    public void setPlayerId(string playerid)
    {
	SessionService.setPlayerId(playerid);
    }

    [JSInvokable]
    public void sendXY(float x, float y)
    {
        float sendX = x;
        float sendY = -y;

        var dataPacket = new DataPacket
        {
            PlayerId = SessionService.PlayerId,
            X = sendX,
            Y = sendY,
        };
        Console.WriteLine($"x={sendX}, y={sendY}");
        GameplayService.SendUpdateToClients(dataPacket);
    }

    public void Dispose()
    {
      GC.SuppressFinalize(this);

      if (ObjectReference != null)
      {
        //Now dispose our object reference so our component can be garbage collected
        ObjectReference.Dispose();
      }
    }
}
